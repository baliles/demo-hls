/*
 * Created on 21 Jul 2015 ( Time 15:46:37 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package com.heroku.demo.entities;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;

import javax.persistence.*;

import com.heroku.demo.model.Register;

/**
 * Persistent class for entity stored in table "patient_requests__c"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="patient_requests__c", schema="salesforce" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="PatientRequest.countAll", query="SELECT COUNT(x) FROM PatientRequest x" )
} )
public class PatientRequest implements Serializable
{
    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id", nullable=false)
    private Integer    id           ;

    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="sfid", length=18)
    private String     sfid         ;

    @Column(name="request_sub_category__c", length=255)
    private String     requestSubCategoryC ;

    @Column(name="request_status__c", length=255)
    private String     requestStatusC ;

    @Temporal(TemporalType.DATE)
    @Column(name="lastactivitydate")
    private Date       lastactivitydate ;

    @Column(name="_hc_err", length=2147483647)
    private String     hcErr        ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="systemmodstamp")
    private Date       systemmodstamp ;

    @Column(name="request_type__c", length=255)
    private String     requestTypeC ;

    @Column(name="isdeleted")
    private Boolean    isdeleted    ;

    @Column(name="name", length=80)
    private String     name         ;

    @Column(name="comments__c", length=2147483647)
    private String     commentsC    ;

    @Column(name="_hc_lastop", length=32)
    private String     hcLastop     ;

    @Column(name="patient_name__c", length=18)
    private String     patientNameC ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------

    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public PatientRequest()
    {
		super();
    }
    
        
    
    public PatientRequest(Register r) {
		this.requestSubCategoryC = r.getSubCategory();
		this.requestStatusC = "New";
		this.systemmodstamp = new Date();
		this.requestTypeC = r.getType();
		this.isdeleted = false;
		this.name = "9999";
		this.commentsC = r.getComment();
		this.patientNameC = r.getPatient();

		
	}



	public PatientRequest update(PatientRequest p) {
		this.id = p.id;
		this.sfid = p.sfid;
		this.requestSubCategoryC = p.requestSubCategoryC;
		this.requestStatusC = p.requestStatusC;
		this.lastactivitydate = p.lastactivitydate;
		this.hcErr = p.hcErr;
		this.systemmodstamp = p.systemmodstamp;
		this.requestTypeC = p.requestTypeC;
		this.isdeleted = p.isdeleted;
		this.name = p.name;
		this.commentsC = p.commentsC;
		this.hcLastop = p.hcLastop;
		this.patientNameC = p.patientNameC;
		return this;
	}



	//----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id )
    {
        this.id = id ;
    }
    public Integer getId()
    {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : sfid ( varchar ) 
    public void setSfid( String sfid )
    {
        this.sfid = sfid;
    }
    public String getSfid()
    {
        return this.sfid;
    }

    //--- DATABASE MAPPING : request_sub_category__c ( varchar ) 
    public void setRequestSubCategoryC( String requestSubCategoryC )
    {
        this.requestSubCategoryC = requestSubCategoryC;
    }
    public String getRequestSubCategoryC()
    {
        return this.requestSubCategoryC;
    }

    //--- DATABASE MAPPING : request_status__c ( varchar ) 
    public void setRequestStatusC( String requestStatusC )
    {
        this.requestStatusC = requestStatusC;
    }
    public String getRequestStatusC()
    {
        return this.requestStatusC;
    }

    //--- DATABASE MAPPING : lastactivitydate ( date ) 
    public void setLastactivitydate( Date lastactivitydate )
    {
        this.lastactivitydate = lastactivitydate;
    }
    public Date getLastactivitydate()
    {
        return this.lastactivitydate;
    }

    //--- DATABASE MAPPING : _hc_err ( text ) 
    public void setHcErr( String hcErr )
    {
        this.hcErr = hcErr;
    }
    public String getHcErr()
    {
        return this.hcErr;
    }

    //--- DATABASE MAPPING : systemmodstamp ( timestamp ) 
    public void setSystemmodstamp( Date systemmodstamp )
    {
        this.systemmodstamp = systemmodstamp;
    }
    public Date getSystemmodstamp()
    {
        return this.systemmodstamp;
    }

    //--- DATABASE MAPPING : request_type__c ( varchar ) 
    public void setRequestTypeC( String requestTypeC )
    {
        this.requestTypeC = requestTypeC;
    }
    public String getRequestTypeC()
    {
        return this.requestTypeC;
    }

    //--- DATABASE MAPPING : isdeleted ( bool ) 
    public void setIsdeleted( Boolean isdeleted )
    {
        this.isdeleted = isdeleted;
    }
    public Boolean getIsdeleted()
    {
        return this.isdeleted;
    }

    //--- DATABASE MAPPING : name ( varchar ) 
    public void setName( String name )
    {
        this.name = name;
    }
    public String getName()
    {
        return this.name;
    }

    //--- DATABASE MAPPING : comments__c ( text ) 
    public void setCommentsC( String commentsC )
    {
        this.commentsC = commentsC;
    }
    public String getCommentsC()
    {
        return this.commentsC;
    }

    //--- DATABASE MAPPING : _hc_lastop ( varchar ) 
    public void setHcLastop( String hcLastop )
    {
        this.hcLastop = hcLastop;
    }
    public String getHcLastop()
    {
        return this.hcLastop;
    }

    //--- DATABASE MAPPING : patient_name__c ( varchar ) 
    public void setPatientNameC( String patientNameC )
    {
        this.patientNameC = patientNameC;
    }
    public String getPatientNameC()
    {
        return this.patientNameC;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------

    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(sfid);
        sb.append("|");
        sb.append(requestSubCategoryC);
        sb.append("|");
        sb.append(requestStatusC);
        sb.append("|");
        sb.append(lastactivitydate);
        sb.append("|");
        sb.append(hcErr);
        sb.append("|");
        sb.append(systemmodstamp);
        sb.append("|");
        sb.append(requestTypeC);
        sb.append("|");
        sb.append(isdeleted);
        sb.append("|");
        sb.append(name);
        sb.append("|");
        sb.append(commentsC);
        sb.append("|");
        sb.append(hcLastop);
        sb.append("|");
        sb.append(patientNameC);
        return sb.toString(); 
    } 

}